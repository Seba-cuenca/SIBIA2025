SIBIA_ML_SYSTEM/
├── core/                    # 4 archivos principales
├── api/                     # 5 blueprints de Flask
├── data/                    # JSONs persistentes
├── templates/               # HTML
├── static/                  # CSS/JS
├── app.py
├── config.py
└── requirements.txt



Integra el sistema SIBIA ML completo en mi aplicación Flask existente.

ARCHIVOS A INTEGRAR:
1. core/asistente_sibia_definitivo.py
2. core/sistema_aprendizaje_continuo.py  
3. core/sistema_formulas_calculos.py
4. core/sistema_comparacion_graficos.py
5. services/web_voice_system.py

TAREAS:
1. Crear estructura de carpetas según ESTRUCTURA_PROYECTO_SIBIA.md
2. Adaptar ToolContext en asistente_sibia_definitivo.py con mis funciones reales:
   - obtener_stock_actual()
   - obtener_mezcla_calculada()
   - leer_sensor_plc()
3. Registrar blueprints en app.py
4. Crear endpoints API según routes_*.py
5. Verificar que las dependencias de requirements.txt estén instaladas

PUNTOS CRÍTICOS:
- Asegurar que ToolContext tenga acceso real a stock, mezclas y sensores
- No sobrescribir mis rutas existentes
- Mantener compatibilidad con mi sistema actual


# 📁 ESTRUCTURA DEL PROYECTO SIBIA

## Estructura de Carpetas

```
SIBIA_ML_SYSTEM/
│
├── 📁 core/                              # Módulos principales
│   ├── __init__.py
│   ├── asistente_sibia_definitivo.py    # Asistente principal con todos los modelos
│   ├── sistema_aprendizaje_continuo.py  # Sistema de aprendizaje del usuario
│   ├── sistema_formulas_calculos.py     # Sistema de fórmulas y cálculos
│   └── sistema_comparacion_graficos.py  # Comparación de escenarios y gráficos
│
├── 📁 ml_models/                         # Modelos de Machine Learning
│   ├── __init__.py
│   ├── modelo_xgboost.py                # Predicciones con XGBoost
│   ├── algoritmo_genetico.py           # Optimización con AG
│   ├── optimizacion_bayesiana.py       # Optimización Bayesiana
│   └── sistema_cain.py                  # Sistema CAIN para sensores
│
├── 📁 services/                          # Servicios adicionales
│   ├── __init__.py
│   ├── busqueda_web.py                  # Búsqueda en internet
│   ├── sistema_clima.py                 # Información del clima
│   ├── personalizacion.py               # Sistema de personalización
│   └── web_voice_system.py              # Sistema de voz web
│
├── 📁 api/                               # Endpoints Flask
│   ├── __init__.py
│   ├── routes_chat.py                   # Rutas del chat
│   ├── routes_aprendizaje.py            # Rutas de aprendizaje
│   ├── routes_escenarios.py             # Rutas de escenarios
│   ├── routes_graficos.py               # Rutas de gráficos
│   └── routes_estadisticas.py           # Rutas de estadísticas
│
├── 📁 data/                              # Datos persistentes
│   ├── conocimiento_sibia.json          # Base de conocimiento aprendido
│   ├── escenarios_sibia.json            # Escenarios guardados
│   ├── usuario_sibia.json               # Datos del usuario
│   ├── asistente_ml_completo.json       # Cache del asistente
│   └── voice_config.json                # Configuración de voz
│
├── 📁 static/                            # Archivos estáticos
│   ├── css/
│   │   └── sibia_styles.css
│   ├── js/
│   │   ├── sibia_chat.js
│   │   ├── sibia_escenarios.js
│   │   └── sibia_graficos.js
│   └── images/
│       └── logo_sibia.png
│
├── 📁 templates/                         # Templates HTML
│   ├── base.html
│   ├── chat.html
│   ├── dashboard.html
│   ├── escenarios.html
│   └── aprendizaje.html
│
├── 📁 tests/                             # Tests
│   ├── __init__.py
│   ├── test_asistente.py
│   ├── test_aprendizaje.py
│   └── test_formulas.py
│
├── 📁 docs/                              # Documentación
│   ├── README.md
│   ├── INSTALACION.md
│   ├── API_REFERENCE.md
│   └── EJEMPLOS.md
│
├── app.py                                # Aplicación Flask principal
├── config.py                             # Configuración
├── requirements.txt                      # Dependencias
└── .env.example                          # Variables de entorno ejemplo

```

---

## 📄 Contenido de Archivos Principales

### 1. `requirements.txt`

```txt
# Framework
Flask==2.3.0
Flask-CORS==4.0.0

# Machine Learning
numpy==1.24.3
scikit-learn==1.3.0
xgboost==2.0.0

# Gráficos
matplotlib==3.7.1

# Web y APIs
requests==2.31.0
beautifulsoup4==4.12.2

# Voz
gtts==2.3.2
edge-tts==6.1.9

# Utilidades
python-dotenv==1.0.0
```

---

### 2. `config.py`

```python
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    # Flask
    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')
    DEBUG = os.getenv('DEBUG', 'True') == 'True'
    
    # APIs
    WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', '')
    
    # Rutas de datos
    DATA_DIR = os.path.join(os.path.dirname(__file__), 'data')
    
    # Sistema de voz
    VOICE_ENABLED = os.getenv('VOICE_ENABLED', 'True') == 'True'
    VOICE_LANGUAGE = os.getenv('VOICE_LANGUAGE', 'es')
    
    # Machine Learning
    ML_MODELS_DIR = os.path.join(os.path.dirname(__file__), 'ml_models', 'trained')
    
    # Logs
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
```

---

### 3. `app.py`

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SIBIA - Sistema Inteligente de Biogás con IA Avanzada
Aplicación Flask Principal
"""

from flask import Flask, render_template, jsonify
from flask_cors import CORS
import logging
from config import Config

# Importar blueprints
from api.routes_chat import chat_bp
from api.routes_aprendizaje import aprendizaje_bp
from api.routes_escenarios import escenarios_bp
from api.routes_graficos import graficos_bp
from api.routes_estadisticas import estadisticas_bp

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_app(config_class=Config):
    """Factory para crear la aplicación Flask"""
    app = Flask(__name__)
    app.config.from_object(config_class)
    
    # CORS
    CORS(app)
    
    # Registrar blueprints
    app.register_blueprint(chat_bp, url_prefix='/api/chat')
    app.register_blueprint(aprendizaje_bp, url_prefix='/api/aprendizaje')
    app.register_blueprint(escenarios_bp, url_prefix='/api/escenarios')
    app.register_blueprint(graficos_bp, url_prefix='/api/graficos')
    app.register_blueprint(estadisticas_bp, url_prefix='/api/estadisticas')
    
    # Ruta principal
    @app.route('/')
    def index():
        return render_template('chat.html')
    
    @app.route('/dashboard')
    def dashboard():
        return render_template('dashboard.html')
    
    @app.route('/escenarios')
    def escenarios():
        return render_template('escenarios.html')
    
    @app.route('/health')
    def health():
        return jsonify({'status': 'ok', 'version': '5.0'})
    
    logger.info("SIBIA inicializado correctamente")
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(host='0.0.0.0', port=5000, debug=True)
```

---

### 4. `.env.example`

```env
# Configuración de Flask
SECRET_KEY=tu-secret-key-aqui
DEBUG=True

# APIs Externas
WEATHER_API_KEY=tu-api-key-openweathermap

# Sistema de Voz
VOICE_ENABLED=True
VOICE_LANGUAGE=es

# Logs
LOG_LEVEL=INFO

# Base de datos (si usas)
DATABASE_URL=sqlite:///sibia.db
```

---

### 5. `api/__init__.py`

```python
"""
API Endpoints para SIBIA
"""
```

---

### 6. `api/routes_chat.py`

```python
from flask import Blueprint, request, jsonify
from core.asistente_sibia_definitivo import asistente_sibia_definitivo
from core.sistema_aprendizaje_continuo import sistema_aprendizaje

chat_bp = Blueprint('chat', __name__)

@chat_bp.route('/mensaje', methods=['POST'])
def procesar_mensaje():
    """Procesa un mensaje del usuario"""
    data = request.get_json()
    pregunta = data.get('pregunta', '')
    
    if not pregunta:
        return jsonify({'error': 'Pregunta vacía'}), 400
    
    # Buscar en conocimiento aprendido primero
    conocimiento = sistema_aprendizaje.buscar_conocimiento(pregunta)
    
    if conocimiento:
        return jsonify({
            'respuesta': conocimiento.respuesta_correcta,
            'motor': 'APRENDIZAJE_CONTINUO',
            'confianza': conocimiento.confianza,
            'aprendido': True
        })
    
    # Usar asistente SIBIA
    # TODO: Construir contexto con tus datos reales
    resultado = asistente_sibia_definitivo.procesar_pregunta(pregunta)
    
    return jsonify(resultado)
```

---

### 7. `api/routes_aprendizaje.py`

```python
from flask import Blueprint, request, jsonify
from core.sistema_aprendizaje_continuo import sistema_aprendizaje

aprendizaje_bp = Blueprint('aprendizaje', __name__)

@aprendizaje_bp.route('/corregir', methods=['POST'])
def corregir_respuesta():
    """Permite al usuario corregir una respuesta"""
    data = request.get_json()
    
    exito = sistema_aprendizaje.agregar_correccion(
        pregunta=data['pregunta'],
        respuesta_original=data['respuesta_incorrecta'],
        respuesta_correcta=data['respuesta_correcta'],
        contexto=data.get('contexto')
    )
    
    return jsonify({
        'exito': exito,
        'mensaje': '¡Gracias! He aprendido esta corrección.' if exito else 'Error'
    })

@aprendizaje_bp.route('/estadisticas', methods=['GET'])
def obtener_estadisticas():
    """Estadísticas del sistema de aprendizaje"""
    return jsonify(sistema_aprendizaje.obtener_estadisticas())
```

---

### 8. `api/routes_escenarios.py`

```python
from flask import Blueprint, request, jsonify
from core.sistema_comparacion_graficos import sistema_comparacion

escenarios_bp = Blueprint('escenarios', __name__)

@escenarios_bp.route('/crear', methods=['POST'])
def crear_escenario():
    """Crea un nuevo escenario"""
    data = request.get_json()
    
    escenario = sistema_comparacion.crear_escenario(
        nombre=data['nombre'],
        descripcion=data.get('descripcion', ''),
        parametros=data['parametros'],
        resultado=data['resultado'],
        unidad=data['unidad'],
        tipo_calculo=data['tipo_calculo']
    )
    
    return jsonify({'exito': True, 'escenario_id': escenario.id})

@escenarios_bp.route('/listar', methods=['GET'])
def listar_escenarios():
    """Lista escenarios"""
    tipo = request.args.get('tipo')
    escenarios = sistema_comparacion.listar_escenarios(tipo)
    return jsonify({'escenarios': escenarios})

@escenarios_bp.route('/comparar', methods=['POST'])
def comparar_escenarios():
    """Compara escenarios"""
    data = request.get_json()
    ids = data.get('ids_escenarios', [])
    
    comparacion = sistema_comparacion.comparar_escenarios(ids)
    return jsonify(comparacion)
```

---

### 9. `api/routes_graficos.py`

```python
from flask import Blueprint, request, jsonify
from core.sistema_comparacion_graficos import sistema_graficos

graficos_bp = Blueprint('graficos', __name__)

@graficos_bp.route('/comparacion', methods=['POST'])
def grafico_comparacion():
    """Genera gráfico de comparación"""
    data = request.get_json()
    grafico = sistema_graficos.generar_grafico_comparacion(data['escenarios'])
    return jsonify({'grafico': grafico})

@graficos_bp.route('/prediccion', methods=['POST'])
def grafico_prediccion():
    """Genera gráfico de predicción"""
    data = request.get_json()
    grafico = sistema_graficos.generar_grafico_prediccion(
        data['temperatura'],
        data['presion'],
        data['prediccion']
    )
    return jsonify({'grafico': grafico})
```

---

### 10. `docs/INSTALACION.md`

```markdown
# Instalación de SIBIA

## Requisitos Previos

- Python 3.8 o superior
- pip
- virtualenv (recomendado)

## Instalación

### 1. Clonar/Copiar archivos

Coloca todos los archivos en una carpeta llamada `SIBIA_ML_SYSTEM/`

### 2. Crear entorno virtual

```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows
```

### 3. Instalar dependencias

```bash
pip install -r requirements.txt
```

### 4. Configurar variables de entorno

```bash
cp .env.example .env
# Editar .env con tus configuraciones
```

### 5. Ejecutar aplicación

```bash
python app.py
```

La aplicación estará disponible en: http://localhost:5000

## Integración con tu sistema existente

Para integrar con tu aplicación Flask existente:

1. Copia la carpeta `core/` a tu proyecto
2. Copia la carpeta `api/` a tu proyecto
3. Registra los blueprints en tu `app.py`
4. Adapta las rutas según tu estructura

```python
from api.routes_chat import chat_bp
app.register_blueprint(chat_bp, url_prefix='/api/chat')
```
```

---

## 📝 Instrucciones para Cursor

Crea un archivo `INSTRUCCIONES_CURSOR.md`:

```markdown
# Instrucciones para Cursor AI

## Objetivo
Integrar el sistema SIBIA ML completo en la aplicación Flask existente.

## Tareas

### 1. Estructura de carpetas
- Crear carpetas: `core/`, `ml_models/`, `services/`, `api/`
- Mover archivos según la estructura definida

### 2. Adaptar ToolContext
- Localizar dónde obtienes: stock, mezclas, sensores
- Reemplazar en `asistente_sibia_definitivo.py` las funciones placeholder con las reales

### 3. Integrar blueprints
- Registrar todos los blueprints en tu `app.py` principal
- Ajustar prefijos de URLs según tu convención

### 4. Configuración
- Agregar variables de entorno en `.env`
- Configurar API de clima (opcional)

### 5. Frontend
- Integrar templates HTML en tu carpeta `templates/`
- Ajustar rutas de assets (CSS/JS)

### 6. Testing
- Probar endpoint `/api/chat/mensaje`
- Probar sistema de aprendizaje
- Verificar generación de gráficos

## Puntos críticos a revisar

1. **ToolContext**: Asegurarse de que tenga acceso real a:
   - `stock_materiales_actual`
   - `mezcla_diaria_calculada`
   - `_obtener_valor_sensor_func` (lectura PLC)

2. **Rutas**: Verificar que las URLs no colisionen con tu sistema

3. **Base de datos**: Si usas DB, adaptar persistencia de escenarios/aprendizaje

4. **Autenticación**: Agregar decoradores de autenticación si es necesario
```

---

## ✅ Checklist Final

```markdown
# Checklist de Integración

- [ ] Estructura de carpetas creada
- [ ] Dependencias instaladas
- [ ] Archivos core/ copiados
- [ ] Blueprints registrados
- [ ] ToolContext adaptado a datos reales
- [ ] Variables de entorno configuradas
- [ ] Templates integrados
- [ ] Assets (CSS/JS) copiados
- [ ] Test de endpoints exitoso
- [ ] Sistema de voz funcionando
- [ ] Gráficos generándose correctamente
- [ ] Aprendizaje continuo guardando
- [ ] Comparación de escenarios operativa
```

¿Quieres que genere algún archivo adicional o necesitas más detalles sobre alguna parte específica?