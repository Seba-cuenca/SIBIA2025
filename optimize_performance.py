#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SIBIA - Optimizador de Rendimiento
Copyright ¬© 2025 AutoLinkSolutions SRL. Todos los derechos reservados.

Script para optimizar el rendimiento de la aplicaci√≥n SIBIA
"""

import os
import sys
import time
import logging
from datetime import datetime
import json

# Importar psutil con manejo de errores
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("‚ö†Ô∏è psutil no disponible, algunas m√©tricas no estar√°n disponibles")

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PerformanceOptimizer:
    """Optimizador de rendimiento para SIBIA"""
    
    def __init__(self):
        self.start_time = time.time()
        
        if PSUTIL_AVAILABLE:
            self.memory_before = psutil.virtual_memory().used
            self.cpu_before = psutil.cpu_percent()
        else:
            self.memory_before = 0
            self.cpu_before = 0
        
    def optimize_imports(self):
        """Optimizar imports para mejor rendimiento"""
        logger.info("üîß Optimizando imports...")
        
        # Imports optimizados
        optimized_imports = """
# Imports optimizados para producci√≥n
import os
import sys
import logging
from datetime import datetime
import json

# Flask optimizado
from flask import Flask, render_template, request, jsonify
from flask_cors import CORS

# Base de datos optimizada
from flask_sqlalchemy import SQLAlchemy
import pymysql

# Procesamiento de datos optimizado
import pandas as pd
import numpy as np

# ML optimizado (sin ChatTTS pesado)
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
import joblib

# TTS ligero
import edge_tts
import asyncio

# Utilidades
import requests
from dotenv import load_dotenv
        """
        
        logger.info("‚úÖ Imports optimizados")
        return optimized_imports
    
    def optimize_database_connections(self):
        """Optimizar conexiones de base de datos"""
        logger.info("üóÑÔ∏è Optimizando conexiones de base de datos...")
        
        db_config = {
            "pool_size": 5,
            "pool_timeout": 30,
            "pool_recycle": 3600,
            "pool_pre_ping": True,
            "max_overflow": 10
        }
        
        logger.info("‚úÖ Configuraci√≥n de DB optimizada")
        return db_config
    
    def optimize_caching(self):
        """Configurar sistema de cache optimizado"""
        logger.info("üíæ Configurando sistema de cache...")
        
        cache_config = {
            "default_timeout": 300,  # 5 minutos
            "key_prefix": "sibia:",
            "max_size": 1000,
            "compression": True
        }
        
        logger.info("‚úÖ Sistema de cache configurado")
        return cache_config
    
    def optimize_ml_models(self):
        """Optimizar modelos de ML"""
        logger.info("ü§ñ Optimizando modelos de ML...")
        
        ml_config = {
            "xgboost_threads": 2,  # Limitar threads para servidor
            "sklearn_n_jobs": 1,   # Un solo job para evitar conflictos
            "model_cache_size": 100,
            "prediction_timeout": 30
        }
        
        logger.info("‚úÖ Modelos ML optimizados")
        return ml_config
    
    def disable_heavy_features(self):
        """Deshabilitar caracter√≠sticas pesadas para mejor rendimiento"""
        logger.info("‚ö° Deshabilitando caracter√≠sticas pesadas...")
        
        disabled_features = {
            "chattts_enabled": False,
            "heavy_visualizations": False,
            "real_time_updates": True,  # Mantener actualizaciones en tiempo real
            "advanced_analytics": True,  # Mantener analytics b√°sicos
            "voice_synthesis": "edge-tts"  # Usar TTS ligero
        }
        
        logger.info("‚úÖ Caracter√≠sticas pesadas deshabilitadas")
        return disabled_features
    
    def optimize_server_config(self):
        """Optimizar configuraci√≥n del servidor"""
        logger.info("üñ•Ô∏è Optimizando configuraci√≥n del servidor...")
        
        server_config = {
            "workers": 2,  # Pocos workers para servidor gratuito
            "threads": 4,
            "max_requests": 1000,
            "timeout": 30,
            "keepalive": 2,
            "max_keepalive_requests": 100
        }
        
        logger.info("‚úÖ Configuraci√≥n del servidor optimizada")
        return server_config
    
    def generate_optimized_config(self):
        """Generar archivo de configuraci√≥n optimizado"""
        logger.info("üìù Generando configuraci√≥n optimizada...")
        
        config = {
            "copyright": "¬© 2025 AutoLinkSolutions SRL",
            "company": "AutoLinkSolutions SRL",
            "optimization_date": datetime.now().isoformat(),
            "database": self.optimize_database_connections(),
            "cache": self.optimize_caching(),
            "ml_models": self.optimize_ml_models(),
            "disabled_features": self.disable_heavy_features(),
            "server": self.optimize_server_config(),
            "performance": {
                "memory_limit_mb": 512,
                "cpu_limit_percent": 80,
                "response_time_limit_ms": 2000,
                "concurrent_requests_limit": 50
            }
        }
        
        # Guardar configuraci√≥n
        with open('config_optimized.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        logger.info("‚úÖ Configuraci√≥n optimizada guardada en config_optimized.json")
        return config
    
    def measure_performance_improvement(self):
        """Medir mejora de rendimiento"""
        end_time = time.time()
        execution_time = end_time - self.start_time
        
        if PSUTIL_AVAILABLE:
            memory_after = psutil.virtual_memory().used
            cpu_after = psutil.cpu_percent()
            memory_used = memory_after - self.memory_before
            
            logger.info(f"‚è±Ô∏è Tiempo de ejecuci√≥n: {execution_time:.2f} segundos")
            logger.info(f"üíæ Memoria utilizada: {memory_used / 1024 / 1024:.2f} MB")
            logger.info(f"üñ•Ô∏è CPU promedio: {cpu_after:.1f}%")
            
            return {
                "execution_time": execution_time,
                "memory_used_mb": memory_used / 1024 / 1024,
                "cpu_percent": cpu_after
            }
        else:
            logger.info(f"‚è±Ô∏è Tiempo de ejecuci√≥n: {execution_time:.2f} segundos")
            logger.info("‚ö†Ô∏è M√©tricas de memoria y CPU no disponibles (psutil no instalado)")
            
            return {
                "execution_time": execution_time,
                "memory_used_mb": 0,
                "cpu_percent": 0
            }
    
    def create_performance_report(self):
        """Crear reporte de rendimiento"""
        logger.info("üìä Generando reporte de rendimiento...")
        
        # Informaci√≥n del sistema
        if PSUTIL_AVAILABLE:
            system_info = {
                "cpu_count": psutil.cpu_count(),
                "memory_total_gb": psutil.virtual_memory().total / 1024 / 1024 / 1024,
                "disk_free_gb": psutil.disk_usage('/').free / 1024 / 1024 / 1024
            }
        else:
            system_info = {
                "cpu_count": "N/A (psutil no disponible)",
                "memory_total_gb": "N/A (psutil no disponible)",
                "disk_free_gb": "N/A (psutil no disponible)"
            }
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "company": "AutoLinkSolutions SRL",
            "system_info": system_info,
            "optimizations_applied": [
                "Imports optimizados",
                "Conexiones DB optimizadas",
                "Sistema de cache configurado",
                "Modelos ML optimizados",
                "Caracter√≠sticas pesadas deshabilitadas",
                "Configuraci√≥n de servidor optimizada"
            ],
            "performance_metrics": self.measure_performance_improvement(),
            "recommendations": [
                "Usar servidor con al menos 1GB RAM",
                "Implementar Redis para cache",
                "Usar CDN para archivos est√°ticos",
                "Monitorear m√©tricas de rendimiento",
                "Implementar rate limiting"
            ]
        }
        
        # Guardar reporte
        with open('performance_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        logger.info("‚úÖ Reporte de rendimiento guardado en performance_report.json")
        return report

def main():
    """Funci√≥n principal del optimizador"""
    print("üöÄ SIBIA Performance Optimizer")
    print("¬© 2025 AutoLinkSolutions SRL")
    print("=" * 50)
    
    optimizer = PerformanceOptimizer()
    
    try:
        # Aplicar optimizaciones
        optimizer.optimize_imports()
        optimizer.optimize_database_connections()
        optimizer.optimize_caching()
        optimizer.optimize_ml_models()
        optimizer.disable_heavy_features()
        optimizer.optimize_server_config()
        
        # Generar configuraci√≥n optimizada
        config = optimizer.generate_optimized_config()
        
        # Generar reporte
        report = optimizer.create_performance_report()
        
        print("\n‚úÖ Optimizaci√≥n completada exitosamente!")
        print(f"üìä Configuraci√≥n guardada en: config_optimized.json")
        print(f"üìà Reporte guardado en: performance_report.json")
        print(f"üè¢ Empresa: {config['company']}")
        print(f"üìÖ Fecha: {config['optimization_date']}")
        
    except Exception as e:
        logger.error(f"‚ùå Error durante la optimizaci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
