/**
 * PRUEBA DE VELOCIDAD ESPEC√çFICA - ASISTENTE Y CALCULADORA SIBIA
 * Este script mide espec√≠ficamente los tiempos de respuesta de estas funciones
 */

class PruebaVelocidadEspecifica {
    constructor() {
        this.metricas = {
            asistente: {
                tiempoInicializacion: 0,
                tiempoRespuesta: 0,
                tiempoVoz: 0,
                llamadasAPI: 0,
                errores: []
            },
            calculadora: {
                tiempoCargaMateriales: 0,
                tiempoCalculo: 0,
                tiempoRenderizadoGrafico: 0,
                llamadasAPI: 0,
                errores: []
            }
        };
        this.iniciarPruebas();
    }

    async iniciarPruebas() {
        console.log('üöÄ Iniciando pruebas de velocidad espec√≠ficas...');
        
        // Esperar a que el DOM est√© completamente cargado
        await this.esperarDOM();
        
        // Probar asistente
        await this.probarAsistente();
        
        // Probar calculadora
        await this.probarCalculadora();
        
        // Mostrar resultados
        this.mostrarResultados();
    }

    async esperarDOM() {
        return new Promise((resolve) => {
            if (document.readyState === 'complete') {
                resolve();
            } else {
                window.addEventListener('load', resolve);
            }
        });
    }

    async probarAsistente() {
        console.log('ü§ñ Probando velocidad del asistente...');
        
        const inicio = performance.now();
        
        try {
            // 1. Probar inicializaci√≥n del asistente
            const inicioInit = performance.now();
            await this.probarInicializacionAsistente();
            this.metricas.asistente.tiempoInicializacion = performance.now() - inicioInit;
            
            // 2. Probar respuesta del asistente
            const inicioRespuesta = performance.now();
            await this.probarRespuestaAsistente();
            this.metricas.asistente.tiempoRespuesta = performance.now() - inicioRespuesta;
            
            // 3. Probar s√≠ntesis de voz
            const inicioVoz = performance.now();
            await this.probarSintesisVoz();
            this.metricas.asistente.tiempoVoz = performance.now() - inicioVoz;
            
        } catch (error) {
            this.metricas.asistente.errores.push(error.message);
            console.error('Error probando asistente:', error);
        }
        
        console.log(`‚úÖ Asistente probado en ${(performance.now() - inicio).toFixed(2)}ms`);
    }

    async probarInicializacionAsistente() {
        return new Promise((resolve) => {
            // Verificar elementos del asistente
            const elementos = [
                'asistente-chat-container',
                'asistente-chatbox',
                'asistente-input',
                'asistente-send-btn',
                'asistente-mic-btn'
            ];
            
            let elementosEncontrados = 0;
            elementos.forEach(id => {
                if (document.getElementById(id)) {
                    elementosEncontrados++;
                }
            });
            
            console.log(`üìã Elementos del asistente encontrados: ${elementosEncontrados}/${elementos.length}`);
            
            // Verificar APIs de voz
            const vozDisponible = window.speechSynthesis && (window.SpeechRecognition || window.webkitSpeechRecognition);
            console.log(`üé§ APIs de voz disponibles: ${vozDisponible ? 'S√≠' : 'No'}`);
            
            resolve();
        });
    }

    async probarRespuestaAsistente() {
        return new Promise((resolve) => {
            // Simular una pregunta al asistente
            const pregunta = "¬øCu√°l es el estado actual del sistema?";
            
            // Interceptar llamadas fetch para medir tiempo de respuesta
            const originalFetch = window.fetch;
            let llamadasAsistente = 0;
            
            window.fetch = function(url, options) {
                if (url.includes('/asistente') || url.includes('/chat')) {
                    llamadasAsistente++;
                    const inicio = performance.now();
                    
                    return originalFetch.call(this, url, options).then(response => {
                        const tiempo = performance.now() - inicio;
                        console.log(`üåê Llamada API asistente: ${tiempo.toFixed(2)}ms`);
                        return response;
                    });
                }
                return originalFetch.call(this, url, options);
            };
            
            this.metricas.asistente.llamadasAPI = llamadasAsistente;
            
            // Restaurar fetch original despu√©s de un tiempo
            setTimeout(() => {
                window.fetch = originalFetch;
                resolve();
            }, 1000);
        });
    }

    async probarSintesisVoz() {
        return new Promise((resolve) => {
            if (!window.speechSynthesis) {
                console.log('‚ö†Ô∏è S√≠ntesis de voz no disponible');
                resolve();
                return;
            }
            
            const texto = "Prueba de s√≠ntesis de voz";
            const inicio = performance.now();
            
            const utterance = new SpeechSynthesisUtterance(texto);
            utterance.onend = () => {
                const tiempo = performance.now() - inicio;
                console.log(`üéµ S√≠ntesis de voz: ${tiempo.toFixed(2)}ms`);
                resolve();
            };
            
            utterance.onerror = () => {
                console.log('‚ùå Error en s√≠ntesis de voz');
                resolve();
            };
            
            // Cancelar cualquier s√≠ntesis anterior
            window.speechSynthesis.cancel();
            window.speechSynthesis.speak(utterance);
        });
    }

    async probarCalculadora() {
        console.log('üßÆ Probando velocidad de la calculadora...');
        
        const inicio = performance.now();
        
        try {
            // 1. Probar carga de materiales
            const inicioMateriales = performance.now();
            await this.probarCargaMateriales();
            this.metricas.calculadora.tiempoCargaMateriales = performance.now() - inicioMateriales;
            
            // 2. Probar c√°lculo de mezcla
            const inicioCalculo = performance.now();
            await this.probarCalculoMezcla();
            this.metricas.calculadora.tiempoCalculo = performance.now() - inicioCalculo;
            
            // 3. Probar renderizado de gr√°fico
            const inicioGrafico = performance.now();
            await this.probarRenderizadoGrafico();
            this.metricas.calculadora.tiempoRenderizadoGrafico = performance.now() - inicioGrafico;
            
        } catch (error) {
            this.metricas.calculadora.errores.push(error.message);
            console.error('Error probando calculadora:', error);
        }
        
        console.log(`‚úÖ Calculadora probada en ${(performance.now() - inicio).toFixed(2)}ms`);
    }

    async probarCargaMateriales() {
        return new Promise((resolve) => {
            // Verificar si ya hay materiales cargados
            if (window.materialesBase && Object.keys(window.materialesBase).length > 0) {
                console.log('üì¶ Materiales ya cargados en memoria');
                resolve();
                return;
            }
            
            // Simular carga de materiales
            const inicio = performance.now();
            
            fetch('/obtener_materiales_base_json')
                .then(response => response.json())
                .then(data => {
                    const tiempo = performance.now() - inicio;
                    console.log(`üì¶ Carga de materiales: ${tiempo.toFixed(2)}ms`);
                    this.metricas.calculadora.llamadasAPI++;
                    resolve();
                })
                .catch(error => {
                    console.log('‚ùå Error cargando materiales:', error);
                    resolve();
                });
        });
    }

    async probarCalculoMezcla() {
        return new Promise((resolve) => {
            // Simular c√°lculo de mezcla
            const inicio = performance.now();
            
            // Datos de prueba
            const datosPrueba = {
                materiales_solidos: 10,
                materiales_liquidos: 5,
                porcentaje_purin: 70,
                objetivo_kw: 100
            };
            
            // Simular c√°lculo
            setTimeout(() => {
                const tiempo = performance.now() - inicio;
                console.log(`üßÆ C√°lculo de mezcla: ${tiempo.toFixed(2)}ms`);
                resolve();
            }, 50); // Simular tiempo de c√°lculo
        });
    }

    async probarRenderizadoGrafico() {
        return new Promise((resolve) => {
            const canvas = document.getElementById('graficoMezcla');
            if (!canvas) {
                console.log('‚ö†Ô∏è Canvas del gr√°fico no encontrado');
                resolve();
                return;
            }
            
            const inicio = performance.now();
            
            // Simular renderizado de gr√°fico
            if (window.Chart && window.graficoMezcla) {
                // Actualizar datos del gr√°fico
                window.graficoMezcla.data.datasets[0].data = [60, 40];
                window.graficoMezcla.update();
                
                const tiempo = performance.now() - inicio;
                console.log(`üìä Renderizado de gr√°fico: ${tiempo.toFixed(2)}ms`);
            } else {
                console.log('‚ö†Ô∏è Chart.js no disponible');
            }
            
            resolve();
        });
    }

    mostrarResultados() {
        console.log('\n' + '='.repeat(60));
        console.log('üìä RESULTADOS DE PRUEBAS DE VELOCIDAD ESPEC√çFICAS');
        console.log('='.repeat(60));
        
        console.log('\nü§ñ ASISTENTE:');
        console.log(`   ‚Ä¢ Inicializaci√≥n: ${this.metricas.asistente.tiempoInicializacion.toFixed(2)}ms`);
        console.log(`   ‚Ä¢ Tiempo de respuesta: ${this.metricas.asistente.tiempoRespuesta.toFixed(2)}ms`);
        console.log(`   ‚Ä¢ S√≠ntesis de voz: ${this.metricas.asistente.tiempoVoz.toFixed(2)}ms`);
        console.log(`   ‚Ä¢ Llamadas API: ${this.metricas.asistente.llamadasAPI}`);
        
        if (this.metricas.asistente.errores.length > 0) {
            console.log(`   ‚Ä¢ Errores: ${this.metricas.asistente.errores.join(', ')}`);
        }
        
        console.log('\nüßÆ CALCULADORA:');
        console.log(`   ‚Ä¢ Carga de materiales: ${this.metricas.calculadora.tiempoCargaMateriales.toFixed(2)}ms`);
        console.log(`   ‚Ä¢ C√°lculo de mezcla: ${this.metricas.calculadora.tiempoCalculo.toFixed(2)}ms`);
        console.log(`   ‚Ä¢ Renderizado gr√°fico: ${this.metricas.calculadora.tiempoRenderizadoGrafico.toFixed(2)}ms`);
        console.log(`   ‚Ä¢ Llamadas API: ${this.metricas.calculadora.llamadasAPI}`);
        
        if (this.metricas.calculadora.errores.length > 0) {
            console.log(`   ‚Ä¢ Errores: ${this.metricas.calculadora.errores.join(', ')}`);
        }
        
        // An√°lisis de rendimiento
        this.analizarRendimiento();
    }

    analizarRendimiento() {
        console.log('\nüîç AN√ÅLISIS DE RENDIMIENTO:');
        
        // An√°lisis del asistente
        const tiempoTotalAsistente = this.metricas.asistente.tiempoInicializacion + 
                                   this.metricas.asistente.tiempoRespuesta + 
                                   this.metricas.asistente.tiempoVoz;
        
        if (tiempoTotalAsistente > 2000) {
            console.log('‚ö†Ô∏è ASISTENTE LENTO: Tiempo total > 2000ms');
            console.log('   Recomendaciones:');
            console.log('   - Implementar cach√© para respuestas frecuentes');
            console.log('   - Optimizar s√≠ntesis de voz');
            console.log('   - Reducir tiempo de inicializaci√≥n');
        } else if (tiempoTotalAsistente > 1000) {
            console.log('‚ö†Ô∏è ASISTENTE MODERADO: Tiempo total > 1000ms');
            console.log('   Recomendaciones:');
            console.log('   - Considerar optimizaciones menores');
        } else {
            console.log('‚úÖ ASISTENTE R√ÅPIDO: Tiempo total < 1000ms');
        }
        
        // An√°lisis de la calculadora
        const tiempoTotalCalculadora = this.metricas.calculadora.tiempoCargaMateriales + 
                                     this.metricas.calculadora.tiempoCalculo + 
                                     this.metricas.calculadora.tiempoRenderizadoGrafico;
        
        if (tiempoTotalCalculadora > 1500) {
            console.log('‚ö†Ô∏è CALCULADORA LENTA: Tiempo total > 1500ms');
            console.log('   Recomendaciones:');
            console.log('   - Cargar materiales en background');
            console.log('   - Optimizar c√°lculos matem√°ticos');
            console.log('   - Mejorar renderizado de gr√°ficos');
        } else if (tiempoTotalCalculadora > 500) {
            console.log('‚ö†Ô∏è CALCULADORA MODERADA: Tiempo total > 500ms');
            console.log('   Recomendaciones:');
            console.log('   - Considerar optimizaciones menores');
        } else {
            console.log('‚úÖ CALCULADORA R√ÅPIDA: Tiempo total < 500ms');
        }
        
        // Recomendaciones generales
        console.log('\nüí° RECOMENDACIONES GENERALES:');
        console.log('   1. Implementar lazy loading para componentes pesados');
        console.log('   2. Usar Web Workers para c√°lculos intensivos');
        console.log('   3. Implementar cach√© inteligente para datos frecuentes');
        console.log('   4. Optimizar animaciones y transiciones');
        console.log('   5. Reducir llamadas API innecesarias');
    }
}

// Funci√≥n para ejecutar las pruebas
function ejecutarPruebasVelocidadEspecifica() {
    new PruebaVelocidadEspecifica();
}

// Auto-ejecutar si se est√° en modo debug
if (window.location.search.includes('debug=speed')) {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(ejecutarPruebasVelocidadEspecifica, 2000);
    });
}

// Exportar para uso global
window.ejecutarPruebasVelocidadEspecifica = ejecutarPruebasVelocidadEspecifica;

console.log('üîß Pruebas de velocidad espec√≠ficas cargadas');
